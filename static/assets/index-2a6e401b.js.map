{"version":3,"mappings":"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","names":["Layout","jsxs","styles","jsx","Link","Outlet","askApi","options","response","_a","_b","_c","_d","_e","_f","_g","_h","_i","parsedResponse","chatApi","url","_j","update","data","getCitationFilePath","citation","Approaches","RetrievalMode","parseAnswerToHtml","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","part","index","citationIndex","path","renderToStaticMarkup","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","onLikeDislikeClicked","showFollowupQuestions","selectedCitation","useRef","useMemo","useConst","page","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","Fragment","ThumbLike20Regular","ThumbDislike20Regular","ThumbLike20Filled","ThumbDislike20Filled","x","i","AnswerLoading","animatedStyles","useSpring","animated","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Send28Filled","UserChatMessage","message","parseSupportingContentItem","item","parts","title","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","ClearChatButton","onClick","Delete24Regular","Text","popupStyles","mergeStyleSets","Chat","isPopupVisible","showPopup","hidePopup","useBoolean","comment","setComment","likeVal","commentError","setCommentError","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","lastQuestionRef","chatMessageStreamEnd","isLoading","setIsLoading","error","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","useEffect","body","username","onLikeDislike","val","ans","copyAns","makeApiRequest","request","a","askResponse","event","readNDJSONStream","latestResponse","e","clearChat","onPromptTemplateChange","onRetrieveCountChange","onRetrievalModeChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onShowCitation","onToggleTab","tab","saveComment","Layer","Popup","Overlay","FocusTrapZone","DefaultButton","c","q","Panel","SpinButton","Checkbox","Dropdown","Feedback","initializeIcons","router","createHashRouter","ReactDOM","RouterProvider"],"sources":["../../frontend/src/pages/layout/Layout.tsx","../../frontend/src/api/api.ts","../../frontend/src/api/models.ts","../../frontend/src/components/Answer/AnswerParser.tsx","../../frontend/src/components/Answer/Answer.tsx","../../frontend/src/components/Answer/AnswerLoading.tsx","../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../frontend/src/pages/chat/Chat.tsx","../../frontend/src/pages/feedback/Feedback.tsx","../../frontend/src/index.tsx"],"sourcesContent":["import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>AICC GenAI</h3>\r\n                        \r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={styles.headerNavList}>\r\n                            {/* <li>\r\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Chat\r\n                                </NavLink>\r\n                            </li> */}\r\n                            {/* <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/feedback\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Submit Feedback\r\n                                </NavLink>\r\n                            </li> */}\r\n                            {/* <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Ask a question\r\n                                </NavLink>\r\n                            </li> */}\r\n                            {/* <li className={styles.headerNavLeftMargin}>\r\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\r\n                                    <img\r\n                                        src={github}\r\n                                        alt=\"Github logo\"\r\n                                        aria-label=\"Link to github repository\"\r\n                                        width=\"20px\"\r\n                                        height=\"20px\"\r\n                                        className={styles.githubLogo}\r\n                                    />\r\n                                </a>\r\n                            </li> */}\r\n                        </ul>\r\n                    </nav>\r\n                    {/* <h4 className={styles.headerRightText}>Azure OpenAI + Cognitive Search</h4> */}\r\n                </div>\r\n            </header>\r\n            <Outlet />\r\n            {/* <footer className={styles.footer}>\r\n                <b>Disclaimer: </b>\r\n                This OEPS ChatGPT Search application is being evaluated as a future OEPS Search solution. \r\n                The software should be considered in “beta test”, and its performance is limited to certain restrictions on the number of concurrent users and resource availability of Azure OpenAI resources. Search Results provided should be scrutinized to ensure that the answers provided are “correct” and not misleading or inappropriate in relation to the context of the question\r\n                <a style={{marginLeft:\"10px\"}} href=\"https://forms.office.com/Pages/ResponsePage.aspx?id=YPtj3fYHlk2NQOvsphpSTnfGcYUWMQdIvfivJWcAYQRUM0FBUFMxMTBOQzlQUjlLRk9LREhCSEJQWS4u\" target=\"_blank\">Submit Feedback</a>\r\n            </footer> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AskRequest, AskResponse, ChatRequest } from \"./models\";\r\n\r\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\r\n    const url = import.meta.env.VITE_APP_API_ENDPOINT + \"/ask\";\r\n    const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                retrieval_mode: options.overrides?.retrievalMode,\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<Response> {\r\n    let url = options.shouldStream ? \"/chat_stream\" : \"/chat\";\r\n    url = import.meta.env.VITE_APP_API_ENDPOINT + url;\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            approach: options.approach,\r\n            overrides: {\r\n                retrieval_mode: options.overrides?.retrievalMode,\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory,\r\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions\r\n            },\r\n            username:options.username\r\n        })\r\n    });\r\n}\r\n\r\nexport async function update(data:any): Promise<Response> {\r\n    let url = import.meta.env.VITE_APP_API_ENDPOINT + \"/update\";\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${citation}`;\r\n    // return `2018-2020_Environmental_KPI_Metrics-0.pdf`;\r\n}\r\n","export const enum Approaches {\r\n    RetrieveThenRead = \"rtr\",\r\n    ReadRetrieveRead = \"rrr\",\r\n    ReadDecomposeAsk = \"rda\"\r\n}\r\n\r\nexport const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport type AskRequestOverrides = {\r\n    retrievalMode?: RetrievalMode;\r\n    semanticRanker?: boolean;\r\n    semanticCaptions?: boolean;\r\n    excludeCategory?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    promptTemplate?: string;\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    suggestFollowupQuestions?: boolean;\r\n};\r\n\r\nexport type AskRequest = {\r\n    question: string;\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n    id?:number;\r\n    isLike?:number;\r\n};\r\n\r\nexport type ChatTurn = {\r\n    user: string;\r\n    bot?: string;\r\n};\r\n\r\nexport type ChatRequest = {\r\n    history: ChatTurn[];\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n    shouldStream?: boolean;\r\n    username?: String | null;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n    followupQuestions: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n    const followupQuestions: string[] = [];\r\n\r\n    // Extract any follow-up questions that might be in the answer\r\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\r\n        followupQuestions.push(content);\r\n        return \"\";\r\n    });\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    parsedAnswer = parsedAnswer.trim();\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations,\r\n        followupQuestions\r\n    };\r\n}\r\n","import { useMemo, useRef, useState } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { AskResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { ThumbDislike20Filled, ThumbDislike20Regular, ThumbLike20Filled, ThumbLike20Regular } from \"@fluentui/react-icons\";\r\nimport { IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';\r\nimport { DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { useConst } from '@fluentui/react-hooks';\r\n\r\ninterface Props {\r\n    answer: AskResponse;\r\n    isSelected?: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onLikeDislikeClicked: (val: number) => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    onLikeDislikeClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const selectedCitation = useRef<any>(null);\r\n    // const [selectedCitation, setSelectedCitation] = useState<any>(null);\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\r\n    const menuProps = useConst<IContextualMenuProps>(() => ({\r\n        shouldFocusOnMount: true,\r\n        shouldFocusOnContainer: true,\r\n        items: [\r\n            {\r\n                key: 'Open Page', text: 'Open Page', onClick: () => {\r\n                    if(selectedCitation.current){\r\n                        const page = getCitationFilePath(selectedCitation.current[0])\r\n                        onCitationClicked(page)\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                key: 'Open File', text: 'Open File', onClick: () => {\r\n                    if(selectedCitation.current){\r\n                        window.open(selectedCitation.current[1], \"__blank\")\r\n                    }\r\n                }\r\n            },\r\n        ],\r\n    }));\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n    const citationClick = () => {\r\n        console.log(\"citationClick\")\r\n    }\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    {/* <AnswerIcon /> */}\r\n                    <img src=\"wft-icon.png\" alt=\"logo\" style={{ height: \"20px\" }} />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.thoughts}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.data_points.length}\r\n                        />\r\n\r\n\r\n                        {\r\n                            answer.isLike === 0 ? <>\r\n                                <IconButton style={{ color: \"black\" }} onClick={() => onLikeDislikeClicked(1)} title=\"Like\">\r\n                                    <ThumbLike20Regular />\r\n                                </IconButton>\r\n                                <IconButton style={{ color: \"black\" }} onClick={() => onLikeDislikeClicked(-1)} title=\"Dislike\">\r\n                                    <ThumbDislike20Regular />\r\n                                </IconButton>\r\n                            </> : \"\"\r\n                        }\r\n                        {\r\n                            answer.isLike === 1 ?\r\n                                <>\r\n                                    <IconButton style={{ color: \"black\" }}>\r\n                                        <ThumbLike20Filled />\r\n                                    </IconButton>\r\n                                    <IconButton style={{ color: \"black\" }} onClick={() => onLikeDislikeClicked(-1)} title=\"dislike\">\r\n                                        <ThumbDislike20Regular />\r\n                                    </IconButton>\r\n                                </>\r\n                                : \"\"\r\n                        }\r\n                        {\r\n                            answer.isLike === -1 ? <>\r\n                                <IconButton style={{ color: \"black\" }} onClick={() => onLikeDislikeClicked(1)} >\r\n                                    <ThumbLike20Regular title=\"Like\" />\r\n                                </IconButton>\r\n                                <IconButton style={{ color: \"black\" }}>\r\n                                    <ThumbDislike20Filled />\r\n                                </IconButton>\r\n                            </> : \"\"\r\n                        }\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            // const arr = x.split(\",\")\r\n                            \r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(x)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                                // <DefaultButton text={arr[0]} key={i} menuProps={menuProps} onMenuClick={() => { selectedCitation.current = arr }} />\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {parsedAnswer.followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                {/* <AnswerIcon /> */}\r\n                <img src=\"wft-icon.png\" alt=\"logo\" style={{height:\"20px\",width:\"28px\"}}/>\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Generating answer\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || !question.trim();\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"Ask question button\"\r\n                    onClick={sendQuestion}\r\n                >\r\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","type ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = parts.slice(1).join(\": \");\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[];\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {supportingContent.map((x, i) => {\r\n                const parsed = parseSupportingContentItem(x);\r\n\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={i} style={i == (supportingContent.length - 1) ? {marginBottom:\"100px\"} : {}}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Pivot, PivotItem } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { AskResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: AskResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n\r\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"Thought process\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"Supporting content\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.data_points} />\r\n            </PivotItem>\r\n            {/* <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"Citation\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <iframe title=\"Citation\" src={activeCitation} width=\"100%\" height={citationHeight}/>\r\n            </PivotItem> */}\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\r\n            <Delete24Regular />\r\n            <Text>{\"Clear chat\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport { chatApi, update, RetrievalMode, Approaches, AskResponse, ChatRequest, ChatTurn } from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { Any } from \"@react-spring/web\";\r\nimport { mergeStyleSets, FocusTrapZone, Layer, Overlay, Popup } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\n\r\n\r\nconst popupStyles = mergeStyleSets({\r\n    root: {\r\n        background: 'rgba(0, 0, 0, 0.3)',\r\n        bottom: '0',\r\n        left: '0',\r\n        position: 'fixed',\r\n        right: '0',\r\n        top: '0',\r\n    },\r\n    content: {\r\n        background: 'white',\r\n        left: '50%',\r\n        maxWidth: '400px',\r\n        padding: '20px',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n});\r\n\r\nconst Chat = () => {\r\n    const [isPopupVisible, { setTrue: showPopup, setFalse: hidePopup }] = useBoolean(false);\r\n    const [comment, setComment] = useState<string>(\"\");\r\n    const likeVal = useRef<{ val: number, index: number }>({ val: 0, index: 0 });\r\n    const [commentError, setCommentError] = useState<string>(\"\");\r\n\r\n\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Text);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\r\n\r\n    useEffect(() => {\r\n        // localStorage.setItem(\"username\", \"localhost\")\r\n        fetch(\"/.auth/me\")\r\n            .then(function (response) {\r\n                return response.json().then((body: any) => {\r\n                    try {\r\n                        let username = body[0][\"user_id\"];\r\n                        localStorage.setItem(\"username\", username)\r\n                    } catch (error) {\r\n                        console.log(\"error:\", error)\r\n                    }\r\n                });\r\n            })\r\n    }, [])\r\n\r\n    const onLikeDislike = async (val: number, index: number) => {\r\n        likeVal.current[\"val\"] = val;\r\n        likeVal.current[\"index\"] = index;\r\n        if (val == -1) {\r\n            showPopup()\r\n        } else {\r\n            setAnswers((ans: [user: string, response: AskResponse][]) => {\r\n                let copyAns: [user: string, response: AskResponse][] = JSON.parse(JSON.stringify(ans));\r\n                copyAns[index][1].isLike = val\r\n                return copyAns;\r\n            })\r\n            await update({ isLike: val, id: answers[index][1][\"id\"], comment: \"\" })\r\n        }\r\n    }\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                approach: Approaches.ReadRetrieveRead,\r\n                shouldStream: shouldStream,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    retrievalMode: retrievalMode,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions,\r\n                    suggestFollowupQuestions: useSuggestFollowupQuestions,\r\n                },\r\n                username: localStorage.getItem(\"username\")\r\n            };\r\n\r\n            const response = await chatApi(request);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                let answer: string = '';\r\n                let askResponse: AskResponse = {} as AskResponse;\r\n                for await (const event of readNDJSONStream(response.body)) {\r\n                    console.log(\"event:\", event);\r\n                    if (event[\"data_points\"]) {\r\n                        askResponse = event;\r\n                    } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"]) {\r\n                        answer += event[\"choices\"][0][\"delta\"][\"content\"] || \"\";\r\n                        let latestResponse: AskResponse = { ...askResponse, answer: answer };\r\n                        if (event[\"choices\"][0][\"finish_reason\"] === \"stop\") {\r\n                            latestResponse[\"id\"] = event[\"choices\"][0][\"inserted_id\"];\r\n                            latestResponse[\"isLike\"] = 0\r\n                        }\r\n                        setIsLoading(false);\r\n                        setAnswers([...answers, [question, latestResponse]]);\r\n                    }\r\n                }\r\n            } else {\r\n                const parsedResponse: AskResponse = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error:\", e)\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            const url = `${import.meta.env.VITE_APP_BLOB_URL}${citation}${import.meta.env.VITE_APP_SAS_TOKEN}`;\r\n            window.open(url, \"_blank\")\r\n            // setActiveCitation(url);\r\n            // setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const saveComment = async () => {\r\n        console.log(\"comment:\", comment)\r\n        if (comment) {\r\n            hidePopup()\r\n            const val = likeVal.current[\"val\"];\r\n            const index = likeVal.current[\"index\"];\r\n            setAnswers((ans: [user: string, response: AskResponse][]) => {\r\n                let copyAns: [user: string, response: AskResponse][] = JSON.parse(JSON.stringify(ans));\r\n                copyAns[index][1].isLike = val\r\n                return copyAns;\r\n            })\r\n            await update({ isLike: val, id: answers[index][1][\"id\"], comment: comment })\r\n            setComment(\"\")\r\n        } else {\r\n            // commentError.current = \"Comment is required\"\r\n            setCommentError(\"Comment is required\")\r\n            console.log(\"commentError:\", commentError)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {isPopupVisible && (\r\n                <Layer>\r\n                    <Popup\r\n                        className={popupStyles.root}\r\n                        role=\"dialog\"\r\n                        aria-modal=\"true\"\r\n                        onDismiss={hidePopup}\r\n                    >\r\n                        <Overlay onClick={hidePopup} />\r\n                        <FocusTrapZone>\r\n                            <div className={popupStyles.content}>\r\n                                <h2 className={styles.commentHeader}>Comment</h2>\r\n                                <div className={styles.commentForm}>\r\n                                    <TextField label=\"\" multiline rows={5} cols={150} value={comment} onChange={(e: any) => {\r\n                                        setComment(e.target.value)\r\n                                        if (e.target.value) {\r\n                                            // commentError.current = \"\"\r\n                                            setCommentError(\"\")\r\n                                        } else {\r\n                                            // commentError.current = \"Comment is required\"\r\n                                            setCommentError(\"Comment is required\")\r\n                                        }\r\n\r\n                                    }} errorMessage={commentError} />\r\n                                </div>\r\n                                <div>\r\n                                    <DefaultButton onClick={saveComment} primary>Submit</DefaultButton>\r\n                                    <DefaultButton onClick={() => { setComment(\"\"); hidePopup() }} className={styles.closePopup}>Close </DefaultButton>\r\n                                </div>\r\n                            </div>\r\n                        </FocusTrapZone>\r\n                    </Popup>\r\n                </Layer>\r\n            )}\r\n            <div className={styles.disclaimerWrapper}>\r\n                \r\n                <div className={styles.commandsContainer}>\r\n                    <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                    {/* <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} /> */}\r\n                </div>\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            {/* <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" /> */}\r\n                            <h1 className={styles.chatEmptyStateTitle}>AICC GenAI</h1>\r\n                            <p>\r\n                                <div className={styles.powered}>Powered by</div>\r\n                              <img src=\"aisal.png\" alt=\"logo\" style={{ width: \"100px\" }} />\r\n                            </p>\r\n                            {/* <ExampleList onExampleClicked={onExampleClicked} />+ */}\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                <div key={index}>\r\n                                    <UserChatMessage message={answer[0]} />\r\n                                    <div className={styles.chatMessageGpt}>\r\n                                        <Answer\r\n                                            key={index}\r\n                                            answer={answer[1]}\r\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                            onCitationClicked={c => onShowCitation(c, index)}\r\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            onLikeDislikeClicked={(val) => {\r\n                                                onLikeDislike(val, index)\r\n                                            }}\r\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {/* {error ? (\r\n                                <>\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                </>\r\n                            ) : null} */}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput} style={activeAnalysisPanelTab ? { width: \"50%\" } : {}}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Type a new question (e.g. What is AICC?)\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Configure answer generation\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieve this many search results:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label=\"Use semantic ranker for retrieval\"\r\n                        onChange={onUseSemanticRankerChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label=\"Use query-contextual summaries instead of whole documents\"\r\n                        onChange={onUseSemanticCaptionsChange}\r\n                        disabled={!useSemanticRanker}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"Suggest follow-up questions\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                    />\r\n                    <Dropdown\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieval mode\"\r\n                        options={[\r\n                            { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\r\n                            { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\r\n                            { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                        ]}\r\n                        required\r\n                        onChange={onRetrievalModeChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={shouldStream}\r\n                        label=\"Stream chat completion responses\"\r\n                        onChange={onShouldStreamChange}\r\n                    />\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import styles from \"./Feedback.module.css\";\r\nconst Feedback = () => {\r\n    return <div className={styles.feedbackWrapper}>\r\n        \r\n        <div className={styles.feedbackForm}>\r\n            <iframe  style={{ width: \"80%\", height: \"1000px\", border:\"0\" }} src=\"https://forms.office.com/Pages/ResponsePage.aspx?id=YPtj3fYHlk2NQOvsphpSTnfGcYUWMQdIvfivJWcAYQRUM0FBUFMxMTBOQzlQUjlLRk9LREhCSEJQWS4u\"></iframe>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default Feedback;","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport Feedback from \"./pages/feedback/Feedback\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <Layout />,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/oneshot/OneShot\")\r\n            },\r\n            {\r\n                path: \"feedback\",\r\n                element: <Feedback />\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <RouterProvider router={router} />\r\n);\r\n"],"file":"assets/index-2a6e401b.js"}